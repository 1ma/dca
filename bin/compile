#!/usr/bin/env php
<?php

declare(strict_types=1);

$root = dirname(__DIR__);
$binary = $root . '/dca.phar';

if (file_exists($binary)) {
    unlink($binary);
}

$phar = new Phar($binary, 0, $binary);
$phar = $phar->convertToExecutable(Phar::PHAR, Phar::NONE);

$phar->startBuffering();

$phar->addFile($root . '/LICENSE', 'LICENSE');
$phar->addFile($root . '/settings.ini', 'settings.ini');

$filter = static function(SplFileInfo $current, $key, RecursiveIterator $iterator): bool {
    return $iterator->hasChildren() || $current->isFile();
};

$src = new RecursiveCallbackFilterIterator(new RecursiveDirectoryIterator($root . '/src'), $filter);
$vendor = new RecursiveCallbackFilterIterator(new RecursiveDirectoryIterator($root . '/vendor'), $filter);

$phar->buildFromIterator(new RecursiveIteratorIterator($src), $root);
$phar->buildFromIterator(new RecursiveIteratorIterator($vendor), $root);

$phar->addFromString('/bin/dca.php', str_replace("#!/usr/bin/env php\n", '', file_get_contents($root . '/bin/dca')));

$phar->setStub(<<<'PHP'
#!/usr/bin/env php
<?php

declare(strict_types=1);

Phar::mapPhar('dca.phar');

require 'phar://dca.phar/bin/dca.php';

__HALT_COMPILER();
PHP
);

$phar->stopBuffering();

chmod($binary, 0775);
